convert_to_witchcraft = {
	skill = learning
	desc = convert_to_witchcraft_general_desc
	cooldown = { months = 2 }
	is_secret = yes
	uses_agents = yes
	power_per_skill_point = 2
	resistance_per_skill_point = 1
	minimum_progress_chance = 5
	base_secrecy = 20
	maximum_secrecy = 95
	minimum_success = 0
	maximum_success = 80
	icon = icon_scheme_convert_to_witchcraft

	
	allow = {
		is_witch_trigger = yes
		is_adult = yes
		is_imprisoned = no
		is_in_army = no 
		custom_tooltip = { 
		text = "at_war_with_target_or_lieges" 
		is_at_war_with_target_and_its_lieges = no
		}
		is_available_for_personal_scheme = yes 
		trigger_if = {  
			limit = { is_ai = no }
		can_be_target_of_befriend_trigger = yes
		}
		scope:target = {
			is_adult = yes
			NOT = { has_trait = witch } #We don't want to expose them if they have the secret, we'll send you a special event instead where you're both exposed!
			is_imprisoned = no
			is_available_for_personal_scheme = yes 
			is_in_army = no
		}
	}
	
	valid = {
		is_incapable = no
		#Have I been blocked from targeting this character?
		custom_description = { #Permanent
			text = witchcraft_scheme_blocked
			subject = scope:target

			NOT = {
				scope:target = {
					has_character_flag = block_convert_to_witchcraft
				}
			}
		}
		scope:target = {
			exists = location
		}
	}

	use_secrecy = {
		use_convert_to_witchcraft_secrecy_trigger = yes
	}

	valid_agent = {
		age >= 14
	}

	agent_join_chance = {
		base = 0
		
		# Base Reluctance, including negative AI Energy
		modifier = {
			add = {
				value = -20
				if = {
					limit = {
						ai_energy < 0
					}
					add = {
						value = ai_energy
						multiply = 0.5
					}
				}
			}
			desc = BASE_RELUCTANCE
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = 10
			exists = scope:gift
			always = scope:gift
			NOT = {
				OR = {
					scope:target = { is_parent_of = root }
					root = { is_parent_of = scope:target }
				}
			}
			desc = "SCHEME_WITH_GIFT"
		}

		#Target will never scheme against themselves
		modifier = {
			add = -1000
			this = scope:target
			desc = COMPASSIONATE_REASON #SCHEME_NOT_AGAINST_SELF
		}
		
		#Target is not diplomatically available
		modifier = {
			add = -1000
			is_busy_in_events_localised = no
			desc = SCHEME_NOT_DIPLOMATICALLY_AVAILABLE
		}

		#Not a valid witch
		modifier = {
			add = -1000
			save_temporary_scope_as = witch_agent
			NOT = { scope:owner = { knows_about_character_being_witch_trigger = { CHARACTER = scope:witch_agent } } }
			desc = SCHEME_I_AM_NOT_WITCH
		}
		modifier = {
			add = -50
			save_temporary_scope_as = witch_agent
			scope:owner = { knows_about_character_being_witch_trigger = { CHARACTER = scope:witch_agent } }
			NOT = { faith = scope:target.faith }
			desc = SCHEME_NOT_FOLLOWER_OF_WITCHGOD
		}
		
		#I am a witch!
		modifier = {
			add = 50
			scope:owner = { knows_about_character_being_witch_trigger = { CHARACTER = scope:witch_agent } }
			desc = SCHEME_I_AM_WITCH
		}

		# Cowardice
		modifier = {
			trigger = {
				ai_boldness < 0
			}
			add = {
				value = ai_boldness
			}
			desc = SCHEME_I_AM_A_COWARD
		}

		#How much does Agent like Owner?
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:owner }
			}
			who = this
			opinion_target = scope:owner
			multiplier = 0.25
			#step = 5
			desc = SCHEME_MY_OPINION_OF_YOU
		}
	}


	base_success_chance = {
		base = -40
		 #########OPINION#DISABLED FOR AI TO SAVE PERFORMANCE
		opinion_modifier = {
		trigger = {
			scope:owner = {is_ai = no}
			target_knows_about_owner_trigger = yes
		} 
			desc = OBF_opinion_of_you
			who = scope:target
			opinion_target = scope:owner  
			max = 100  
			min = -100    
			multiplier = 1   
		}
		
		modifier = {
			desc = OBF_opinion_of_you
			add = -60
			scope:owner = {is_ai = no}
			target_knows_about_owner_trigger = no
			desc = OBF_doesnt_know_you
		}
		
		#Opinion FOR AI 
		opinion_modifier = {
		trigger = {
			scope:owner = {is_ai = yes}
		} 
			who = scope:target
			opinion_target = scope:owner
			min = -50
			max = 50
			multiplier = 1.5
			step = 5
		}

		#Learning based
		compare_modifier = {
			target = scope:owner
			value = learning
			multiplier = 1.5
			desc = "SCHEME_LEARNING_MODIFIER"
		}
		
		#Diplomacy also counts...
		compare_modifier = { 
			desc = sway_my_diplomacy
			target = scope:owner 
			value = diplomacy
			multiplier = 0.75
		}
		
		#...and your subterfuge ability
		compare_modifier = { 
			desc = OBF_MY_INTRIGUE
			target = scope:owner
			value = intrigue
			multiplier = 0.75
		} 
			
		#TARGET LEARNING  
		witch_learning_modifier = yes 

		#PERSONAL AND DINASTY PRESTIGE
		witch_prestige_modifier = yes
		
		#STRESS LEVELS
		witch_stress_modifier = yes
		
		#LANGUAGE AND CULTURE
		witch_language_and_culture_modifier = yes
		
		#DIPLOMACY, MILITARY STRENGTH, HOSTILITIES AND CLAIMS
		witch_hostility_modifier = yes
		
		#RELIGION AND SECRETS
		witch_religion_modifier = yes 
		   
		#LIFESTYLE AND EDUCATION
		witch_lifestyle_and_education_modifier = yes
		 
		#RELATIONS AND EASE OF CONTACT 
		witch_relation_to_target_modifier = yes
		
		#CHARACTER_MODIFIERS
		witch_char_mods_modifier = yes
		
		#TRAITS AND PERSONALITY
		witch_traits_and_personality_modifier = yes
		
		#HARD MODIFIERS ON TARGET OPINION OF OWNER 
		witch_target_opinion_modifier = yes

		# House Personal Scheme Success Chance on Cultural Parameter
		modifier = {
			add = cultural_house_personal_scheme_success_chance
			desc = KIN_PARAMETER_DESC
			exists = scope:owner.house
			exists = scope:target.house
			scope:owner.culture = {
				has_cultural_parameter = cultural_house_personal_scheme_success_chance
			}
			scope:target.house = scope:owner.house
		}
	}

	agent_success_chance = {
		base = 0
		first_valid = {
			modifier = {
				add = 50
				is_spouse_of = scope:target
				desc = "SCHEME_AGENT_IS_SPOUSE"
			}
			modifier = {
				add = 50
				has_relation_best_friend = scope:target
				desc = "SCHEME_AGENT_IS_BEST_FRIEND"
			}
			modifier = {
				add = 50
				has_relation_guardian = scope:target
				desc = "SCHEME_AGENT_IS_GUARDIAN"
			}
			modifier = {
				add = 30
				has_relation_friend = scope:target
				desc = "SCHEME_AGENT_IS_FRIEND"
			}
			modifier = {
				add = 30
				is_concubine_of = scope:target
				desc = "SCHEME_AGENT_IS_CONCUBINE"
			}
			modifier = {
				add = 30
				has_relation_lover = scope:target
				desc = "SCHEME_AGENT_IS_LOVER"
			}
			modifier = {
				add = 30
				scope:target = {
					is_ruler = yes
				}
				has_council_position = councillor_spymaster
				exists = scope:target.cp:councillor_spymaster
				scope:target.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER"
			}
			modifier = {
				add = 30
				scope:target = {
					is_ruler = no
				}
				has_council_position = councillor_spymaster
				exists = scope:target.liege.cp:councillor_spymaster
				scope:target.liege.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER_IN_MY_COURT"
			}
			modifier = {
				add = 20
				is_close_family_of = scope:target
				desc = "SCHEME_AGENT_IS_CLOSE_KIN"
			}
			modifier = {
				add = 15
				is_powerful_vassal_of = scope:target
				desc = "SCHEME_AGENT_IS_POWERFUL_VASSAL"
			}
			modifier = {
				add = 15
				is_extended_family_of = scope:target
				desc = "SCHEME_AGENT_IS_EXTENDED_FAMILY"
			}
			modifier = {
				add = 10
				scope:target.liege = scope:owner
				desc = "SCHEME_AGENT_IS_COURTIER_MY_COURT"
			}
			modifier = {
				add = 10
				is_ruler = no
				scope:target.liege = this.liege
				desc = "SCHEME_AGENT_IS_FELLOW_COURTIER"
			}
			modifier = {
				add = 5
				desc = "SCHEME_AGENT_IS_COURTIER"
			}
		}
	}

	on_ready = {
		scheme_owner = {
			#DISCOVERY ROLL
			save_scope_value_as = {
				name = discovery_chance
				value = {
					value = 100
					subtract = scope:scheme.scheme_secrecy
				}
			}
			random = {
				chance = scope:discovery_chance
				save_scope_value_as = {
					name = scheme_discovered
					value = yes
				}
			}

			#SUCCESS ROLL
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}

			#SECRECY: DO I WANT TO PROCEED?
			if = {
				limit = { use_convert_to_witchcraft_secrecy_trigger = yes }
				trigger_event = witch.2001
			}
			#CONTINUE WITH OUTCOME ON_ACTION FOR AI TARGETS
			else_if = {
				limit = { scope:target = { is_ai = yes } }

				if = {
					limit = { exists = scope:scheme_successful }
					trigger_event = witch.2003 #Success event
				}
				else = {
					trigger_event = {
						on_action = convert_to_witchcraft_failure_outcome
					}
				}
			}
			#FOR PLAYER CHARACTER, SEND CHOICE EVENT
			else = {
				scope:target = {
					trigger_event = witch.2002
				}
			}
		}
	}

	on_start = {
		#They're already a witch? Let's expose you to each other!
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }

		if = {
			limit = {
				scope:target = { any_secret = { secret_type = secret_witch } }
			}
			scope:owner = {
				trigger_event = {
					id = witch.2006
					days = { 7 14 }
				}
			}
		}
	}

	on_monthly = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }
		
	}

	on_invalidated = {
		scheme_target = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		if = {
			limit = {
				scope:target = { is_alive = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = convert_to_witchcraft_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_died
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = { is_imprisoned = yes }
			}
			scope:target.imprisoner = {
				save_scope_as = other_imprisoner
			}
			scope:owner = {
				send_interface_toast = {
					title = convert_to_witchcraft_scheme_invalidated_title
					left_icon = scope:target
					right_icon = scope:other_imprisoner
					custom_description_no_bullet = {
						subject = scope:other_imprisoner
						object = scope:target
						text = scheme_target_imprisoned_by_other
					}
				}
			}
		}
	}

	success_desc = "CONVERT_TO_WITCHCRAFT_SUCCESS_DESC"
	
	freeze_scheme_when_traveling = yes
	freeze_scheme_when_traveling_target = yes
}

